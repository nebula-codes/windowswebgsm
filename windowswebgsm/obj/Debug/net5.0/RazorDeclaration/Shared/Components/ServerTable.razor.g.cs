// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace windowswebgsm.Shared.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using windowswebgsm;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using windowswebgsm.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Panda\source\repos\windowswebgsm\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Panda\source\repos\windowswebgsm\Shared\Components\ServerTable.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Panda\source\repos\windowswebgsm\Shared\Components\ServerTable.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Panda\source\repos\windowswebgsm\Shared\Components\ServerTable.razor"
using windowswebgsm.Data.Models;

#line default
#line hidden
#nullable disable
    public partial class ServerTable : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 52 "C:\Users\Panda\source\repos\windowswebgsm\Shared\Components\ServerTable.razor"
       
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    private Server selectedItem1 = null;
    private Server selectedItem2 = null;

    private HashSet<Server> selectedItems = new HashSet<Server>();

    private IEnumerable<Server> Servers = new List<Server>();



    protected override void OnInitialized()
    {

        StartCountdown();
    }

    private int Count { get; set; } = 10;

    void StartCountdown()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            if (Count > 0)
            {
                Count--;

                // Note that the following line is necessary because otherwise
                // Blazor would not recognize the state change and not refresh the UI
                InvokeAsync(() =>
                    {

                        StateHasChanged();
                    });
            }
        }), null, 1000, 1000);

        Count = 10;
        //StartCountdown();
    }




    protected override async Task OnInitializedAsync()
    {
        Servers = new List<Server>()
        {
            new Server
            {
                ID = "1",
                PID = 1000,
                Address = "10.24.204.50",
                Status = "Started",
                Port = 7783,
                Name = "Conan Exiles #1",
                QueryPort = "28000",
                Map = "Main Map",
                MaxPlayers = 10,
                Uptime = 0,
            },
            new Server
            {
                ID = "2",
                PID = 2560,
                Address = "10.24.204.50",
                Port = 7780,
                Name = "Ark Modded",
                QueryPort = "27000",
                Map = "Ark Dump",
                MaxPlayers = 20,
                Uptime = 156,
            },
            new Server
            {
                ID = "3",
                PID = 1010,
                Address = "10.24.204.50",
                Status = "Started",
                Port = 7790,
                Name = "7 days to die",
                QueryPort = "1560",
                Map = "Wave defense",
                MaxPlayers = 10,
                Uptime = 0,
            },
            new Server
            {
                ID = "4",
                PID = 5678,
                Address = "10.24.204.49",
                Status = "Starting...",
                Port = 26656,
                Name = "Minecraft Enigmatica 2",
                QueryPort = "N/A",
                Map = "EnigmaticaMain",
                MaxPlayers = 10,
                Uptime = 0,
            },
        };
        
    }

    private bool FilterFunc1(Server server) => FilterFunc(server, searchString1);
    private bool FilterFunc2(Server server) => FilterFunc(server, searchString2);

    private bool FilterFunc(Server server, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (server.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (server.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{server.Address}".Contains(searchString))
            return true;
        return false;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
