@inherits LayoutComponentBase
@using windowswebgsm.Data
@using windowswebgsm.data.Services
@inject GameServerService gameServerService

<MudThemeProvider @bind-IsDarkMode="@_isDark" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <CascadingValue Value="@Servers">
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">WindowsWebGSM</MudText>
            </MudDrawerHeader>
            <DashboardNavMenu />
        </MudDrawer>


        <MudMainContent Style="background:url(/assets/images/bg.jpg); background-size:cover;">
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-4 pt-4">
                @if (@Servers == null)
                {
                    <MudSkeleton></MudSkeleton>
                }
                else
                {
                    @Body
                }



            </MudContainer>
        </MudMainContent>
    </CascadingValue>
</MudLayout>

@code {
    public IEnumerable<GameServer> Servers = new List<GameServer>();


    bool _drawerOpen = true;
    MudTheme _theme = new MudTheme()
        {
            Palette = new Palette()
            {
                Background = "#1e1e2f",
                DrawerBackground = "#27293d",
                AppbarBackground = "#27293d",
                TextPrimary = "#a7a7aa",
                DrawerText = "#a7a7aa",
                DrawerIcon = "#a7a7aa",
                Surface = "#27293d",
                TableLines = "#a7a7aa",
                LinesDefault = "#1e1e2f",



            },

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px"
            }
        };
    bool _isDark;


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        _isDark = false;
        try
        {
            Servers = await Task.Run(() => gameServerService.GetAllGameServersAsync());
        }
        catch (Exception e)
        {
            Servers = null;
        }

    }
}