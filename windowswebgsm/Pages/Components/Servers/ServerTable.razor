
@using static MudBlazor.CategoryTypes;
@using System.Diagnostics;
@using windowswebgsm.Data
@using System.Text.Json
@using System.Net.Http.Json
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<style>
    .mud-checkbox-input {
        border: white;
    }

  
</style>


<MudPaper Style="margin-bottom:1em; margin-top:1em; padding:10px;">


    <MudButton Variant="Variant.Filled" OnClick="@(() => StartServer(_selectedItemsString))" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Success">Start</MudButton>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" Color="Color.Warning">Stop</MudButton>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RestartAlt" Color="Color.Info">Restart</MudButton>
    <MudButton OnClick="@KillServer" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.StopCircle" Color="Color.Error">Kill</MudButton>



    <div style="float:right;">
        <MudButton OnClick="@((e) => OpenCreateDialog(_maxWidth))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Create New Server</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Monitor" Color="Color.Dark">Toggle Console</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Update" Color="Color.Dark">Update</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Backup" Color="Color.Dark">Backup</MudButton>
    </div>

</MudPaper>


<MudTable MultiSelection="true" Items="@Servers" Square="@_square" Dense="@_dense" Hover="@_hover" Bordered="@_bordered" Striped="@_striped" Filter="new Func<GameServer,bool>(FilterFunc1)" @bind-SelectedItems="_selectedItems">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Game Servers</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @*<MudTh>ID</MudTh>*@
        <MudTh>PID</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<GameServer, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh>Name</MudTh>
        <MudTh>IP Address</MudTh>
        <MudTh>Port</MudTh>
        <MudTh>Query Port</MudTh>
        <MudTh>Map</MudTh>
        <MudTh>Players</MudTh>
        <MudTh>Uptime</MudTh>
    </HeaderContent>
    <RowTemplate>
        @*<MudTd DataLabel="ID">@context.ID</MudTd>*@
        <MudTd DataLabel="PID">@context.PID</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="IP Address">@context.Address</MudTd>
        <MudTd DataLabel="Port">@context.Port</MudTd>
        <MudTd DataLabel="Query Port">@context.QueryPort</MudTd>
        <MudTd DataLabel="Map">@context.Map</MudTd>
        <MudTd DataLabel="Players">@context.Players / @context.MaxPlayers</MudTd>
        <MudTd DataLabel="Uptime">@context.FormattedUptime</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@_dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@_striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@_bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true">Selected items: @(_selectedItems==null ? "" : string.Join(", ", _selectedItems.OrderBy(x=>x.Name).Select(x=>x.Name)))</MudText>
    </div>
</div>


    @code {
    [CascadingParameter]
    public IEnumerable<GameServer> Servers { get; set; }


    private bool _square = true;
    private bool _dense = false;
    private bool _hover = true;
    private bool _striped = false;
    private bool _bordered = false;
    private string _searchString1 = "";
    private string _searchString2 = "";
    private GameServer _selectedItem1 = null;
    private GameServer _selectedItem2 = null;

    private HashSet<GameServer> _selectedItems = new HashSet<GameServer>();
    private string _selectedItemsString = "";



    private bool FilterFunc1(GameServer server) => FilterFunc(server, _searchString1);
    private bool FilterFunc2(GameServer server) => FilterFunc(server, _searchString2);

    private bool FilterFunc(GameServer server, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (server.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{server.Address}".Contains(searchString))
            return true;
        return false;
    }


    DialogOptions _maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private void OpenCreateDialog(DialogOptions options)
    {
        Dialog.Show<CreateDialog>("Create New Server", options);
    }



    private void StartServer(string servers)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.HideTransitionDuration = 500;
        Snackbar.Configuration.ShowTransitionDuration = 500;

        _selectedItemsString = "";
        _selectedItemsString += string.Join(", ", _selectedItems.OrderBy(x=>x.Name).Select(x=>x.Name));


        Snackbar.Add($"Following Servers are starting: {_selectedItemsString}", Severity.Success);
    }

    private void KillServer()
    {
        foreach(GameServer server in _selectedItems)
        {
            Process proc;
            Snackbar.Add("Killing the following server: " + server.Name, Severity.Warning);
            try
            {
                if (Process.GetProcessById(server.PID) != null)
                {
                    server.Status = GameServer.ServerStatus.Stopping;

                    proc = Process.GetProcessById(server.PID);

                    proc.Kill();

                    server.Status = GameServer.ServerStatus.Stopped;
                }
             
                
                

            } catch (Exception ex)
            {
                Snackbar.Add("Failed killing the following server: " + server.Name + "\nReason: " + ex.Message, Severity.Error);
            }
        }

    }

    

    private void RestartServer()
    {

    }

    protected override void OnInitialized()
    {
       
        
        StartLoop();
    }

    private int Count { get; set; } = 10;

    void StartLoop()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            foreach(var server in Servers)
            {
                server.Uptime += 1;
                server.FormattedUptime = TimeSpan.FromSeconds(server.Uptime).ToString(@"hh\:mm\:ss");
            }

            InvokeAsync(() =>
            {

                StateHasChanged();
            });

        }), null, 1000, 1000);
    }
}

